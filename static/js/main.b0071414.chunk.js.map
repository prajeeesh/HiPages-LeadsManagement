{"version":3,"sources":["logo.svg","actions/api.js","actions/lead.js","reducers/lead.js","reducers/index.js","actions/store.js","components/LeadItem.js","components/Leads.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","url","fetchAll","axios","get","create","newRecord","post","update","id","updateRecord","put","Delete","delete","ACTION_TYPES","initialState","list","reducers","combineReducers","lead","state","action","type","payload","map","x","filter","store","createStore","compose","applyMiddleware","thunk","refreshPage","alert","LeadItem","record","onAcceptLead","onDeclineLead","Paper","Grid","container","item","xs","TableContainer","Table","TableBody","TableRow","key","firstName","TableCell","colSpan","data-letters","charAt","hover","suburb","category","fullName","desciption","status","phone","email","onClick","className","price","mapActionToProps","fetchAllLeads","dispatch","api","then","response","data","catch","err","console","log","acceptLead","onSuccess","res","declineLead","connect","dCandidateList","props","useEffect","TableHead","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,0LCErCC,EAAU,8BAED,aAEsB,IAA3BC,EAA0B,uDAApBD,EAAU,SAClB,MAAO,CACHE,SAAU,kBAAMC,IAAMC,IAAIH,IAI1BI,OAAQ,SAAAC,GAAS,OAAIH,IAAMI,KAAKN,EAAKK,IACrCE,OAAQ,SAACC,EAAIC,GAAL,OAAsBP,IAAMQ,IAAIV,EAAMQ,EAAIC,IAElDE,OAAQ,SAAAH,GAAE,OAAIN,IAAMU,OAAOZ,EAAMQ,MCbhCK,EACD,SADCA,EAED,SAFCA,EAGD,SAHCA,EAIE,YCLTC,EAAe,CACjBC,KAAM,ICAGC,EAAWC,YAAgB,CACpCC,KDGgB,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAElD,OAAQA,EAAOC,MACX,KAAKR,EACD,OAAO,2BACAM,GADP,IAEIJ,KAAK,YAAKK,EAAOE,WAGzB,KAAKT,EACD,OAAO,2BACAM,GADP,IAEIJ,KAAK,GAAD,mBAAMI,EAAMJ,MAAZ,CAAkBK,EAAOE,YAGrC,KAAKT,EACD,OAAO,2BACAM,GADP,IAEIJ,KAAMI,EAAMJ,KAAKQ,KAAI,SAAAC,GAAC,OAAIA,EAAEhB,IAAMY,EAAOE,QAAQd,GAAKY,EAAOE,QAAUE,OAG/E,KAAKX,EACD,OAAO,2BACAM,GADP,IAEIJ,KAAMI,EAAMJ,KAAKU,QAAO,SAAAD,GAAC,OAAIA,EAAEhB,IAAMY,EAAOE,aAGpD,QACI,OAAOH,MExBJO,EANDC,YACVX,EACAY,YACIC,YAAgBC,O,sFCCxB,SAASC,IAELC,MAAM,aAEV,IAoDeC,EApDE,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAOC,EAAV,EAAUA,aAAaC,EAAvB,EAAuBA,cAAvB,OAEb,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACf,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,KACK,kBAACC,EAAA,EAAD,CAAUC,IAAKZ,EAAOa,WAClB,kBAACC,EAAA,EAAD,CAAWC,QAAS,GAAG,uBAAGC,eAAehB,EAAOa,UAAWI,OAAO,IAA3C,IAAiDjB,EAAOa,aAExF,kBAACF,EAAA,EAAD,CAAUC,IAAKZ,EAAO1B,GAAI4C,OAAK,GAC1B,kBAACJ,EAAA,EAAD,KAAW,8BAAM,kBAAC,IAAD,OAA0Bd,EAAOmB,QAClD,kBAACL,EAAA,EAAD,KAAW,8BAAM,kBAAC,IAAD,OAAoB,8BAAOd,EAAOoB,WACnD,kBAACN,EAAA,EAAD,eAAmBd,EAAO1B,IAC1B,kBAACwC,EAAA,EAAD,KAAYd,EAAOqB,WAEvB,kBAACV,EAAA,EAAD,CAAUC,IAAKZ,EAAOsB,YAClB,kBAACR,EAAA,EAAD,KACkB,QAAjBd,EAAOuB,OACJ,KACA,6BAAK,8BAAM,kBAAC,IAAD,OAAqB,8BAAOvB,EAAOwB,OAC9C,8BAAM,kBAAC,IAAD,OAAwB,8BAAOxB,EAAOyB,UAGpD,kBAACd,EAAA,EAAD,CAAUC,IAAKZ,EAAOsB,YAClB,kBAACR,EAAA,EAAD,CAAWC,QAAS,GAAIf,EAAOsB,aAEnC,kBAACX,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,KACsB,aAAjBd,EAAOuB,OACR,KACI,6BACA,4BAAQG,QAAS,kBAAMzB,EAAaD,EAAO1B,GAAG0B,EAAOH,IAAc8B,UAAU,iBAA7E,UACA,4BAAQD,QAAS,kBAAMxB,EAAcF,EAAO1B,KAAKqD,UAAU,kBAA3D,aAGR,kBAACb,EAAA,EAAD,KACS,6BAAMd,EAAO4B,MAAb,8BCqBlCC,EAAmB,CACtBC,cLhEoB,kBAAM,SAAAC,GAC1BC,IAAYjE,WACPkE,MAAK,SAAAC,GACFH,EAAS,CACL5C,KAAMR,EACNS,QAAS8C,EAASC,UAGzBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QKyD9BG,WLzCkB,SAAClE,EAAI6D,EAAMM,GAAX,OAAyB,SAAAV,GAC3CC,IAAY3D,OAAOC,EAAI6D,GAClBF,MAAK,SAAAS,GACFX,EAAS,CACL5C,KAAMR,EACNS,QAAQ,aAAGd,MAAO6D,KAEtBM,OAEHL,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QKiC9BM,YL9BkB,SAACrE,EAAImE,GAAL,OAAmB,SAAAV,GACrCC,IAAYtD,OAAOJ,GACd2D,MAAK,SAAAS,GACFX,EAAS,CACL5C,KAAMR,EACNS,QAASd,IAEbmE,OAEHL,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SKwBlBO,eAVQ,SAAA3D,GAAK,MAAI,CAC7B4D,eAAiB5D,EAAMD,KAAKH,QASQgD,EAAxBe,EAxEF,SAACE,EAAMN,EAAWG,GAC5BI,qBAAU,WACVD,EAAMhB,kBACJ,IAEF,IAAM7B,EAAe,SAAC3B,EAAG0B,GACrB8C,EAAMN,WAAWlE,EAAG0B,IAElBE,EAAgB,SAAC5B,EAAG0B,GACtB8C,EAAMH,YAAYrE,EAAG0B,IAGzB,OACI,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,KACI,kBAACuC,EAAA,EAAD,KACI,kBAACrC,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,kBAGR,kBAACJ,EAAA,EAAD,KAEQoC,EAAMD,eAAetD,QAAO,SAAAS,GAAM,MAAoB,OAAhBA,EAAOuB,UAAgBlC,KAAI,SAACW,EAAQiD,GACtE,OAAQ,kBAACtC,EAAA,EAAD,CAAUC,IAAKqC,EAAO/B,OAAK,GACvB,kBAACJ,EAAA,EAAD,KAAW,kBAAC,EAAD,CAAUd,OAAQA,EAAQC,aAAcA,EAAcC,cAAeA,aASpH,kBAACE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,KACI,kBAACuC,EAAA,EAAD,KACI,kBAACrC,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,mBAGR,kBAACJ,EAAA,EAAD,KAEQoC,EAAMD,eAAetD,QAAO,SAAAS,GAAM,MAAoB,YAAhBA,EAAOuB,UAAqBlC,KAAI,SAACW,EAAQiD,GAC3E,OAAQ,kBAACtC,EAAA,EAAD,CAAUC,IAAKqC,EAAO/B,OAAK,GACvB,kBAACJ,EAAA,EAAD,KAAW,kBAAC,EAAD,CAAUd,OAAQA,EAAQC,aAAcA,EAAcC,cAAeA,kBCvCrHgD,MARf,WACE,OACE,kBAAC,IAAD,CAAU1D,MAAOA,GACf,kBAAC,EAAD,QCEc2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.b0071414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:50524/api/\"\r\n\r\nexport default {\r\n\r\n    leads(url = baseUrl + 'Leads/') {\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            /* fetchNew: () => axios.get(url + 'GetByStatus/New'),\r\n            fetchAccepted: () => axios.get(url + 'GetByStatus/Accepted'),\r\n            fetchById: id => axios.get(url + id), */\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n            //update: id => axios.put(url + id),\r\n            Delete: id => axios.delete(url + id)\r\n        }\r\n    }\r\n}","import api from \"./api\";\r\n\r\nexport const ACTION_TYPES = {\r\n    CREATE: 'CREATE',\r\n    UPDATE: 'UPDATE',\r\n    DELETE: 'DELETE',\r\n    FETCH_ALL: 'FETCH_ALL'\r\n}\r\n\r\nexport const fetchAll = () => dispatch => {\r\n    api.leads().fetchAll()\r\n        .then(response => {\r\n            dispatch({\r\n                type: ACTION_TYPES.FETCH_ALL,\r\n                payload: response.data\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\n/* export const create = (data, onSuccess) => dispatch => {\r\n    data = formateData(data)\r\n    api.dCandidate().create(data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.CREATE,\r\n                payload: res.data\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n} */\r\n\r\nexport const update = (id, data, onSuccess) => dispatch => {\r\n    api.leads().update(id, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.UPDATE,\r\n                payload: { id, ...data }\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const Delete = (id, onSuccess) => dispatch => {\r\n    api.leads().delete(id)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.DELETE,\r\n                payload: id\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}","import { ACTION_TYPES } from \"../actions/lead\";\r\nconst initialState = {\r\n    list: []\r\n}\r\n\r\n\r\nexport const lead = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                list: [...action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.CREATE:\r\n            return {\r\n                ...state,\r\n                list: [...state.list, action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.UPDATE:\r\n            return {\r\n                ...state,\r\n                list: state.list.map(x => x.id == action.payload.id ? action.payload : x)\r\n            }\r\n\r\n        case ACTION_TYPES.DELETE:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(x => x.id != action.payload)\r\n            }\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { lead } from './lead';\r\nexport const reducers = combineReducers({\r\n    lead\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducers } from '../reducers';\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    compose(\r\n        applyMiddleware(thunk)\r\n    )\r\n)\r\nexport default store;","import React from 'react';\r\nimport { Grid, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Tab } from \"@material-ui/core\";\r\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\r\nimport { FaToolbox } from 'react-icons/fa';\r\nimport { FaPhoneAlt } from 'react-icons/fa';\r\nimport { FaRegEnvelope } from 'react-icons/fa';\r\nimport './LeadItem.css';\r\n\r\nfunction refreshPage() {\r\n    //window.location.reload(true);\r\n    alert('refreshed');\r\n  }\r\nconst LeadItem = ({ record,onAcceptLead,onDeclineLead }) => (\r\n     \r\n    <div >\r\n        <Paper>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                <TableContainer>\r\n                        <Table>\r\n                           <TableBody>\r\n                                <TableRow key={record.firstName}>\r\n                                    <TableCell colSpan={5}><p data-letters={(record.firstName).charAt(0)}> {record.firstName}</p></TableCell>\r\n                                </TableRow>\r\n                           <TableRow key={record.id} hover>\r\n                                <TableCell><span><FaMapMarkerAlt /></span>{record.suburb}</TableCell>\r\n                                <TableCell><span><FaToolbox /></span><span>{record.category}</span></TableCell>\r\n                                <TableCell>Job ID {record.id}</TableCell>\r\n                                <TableCell>{record.fullName}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow key={record.desciption}>\r\n                                <TableCell>\r\n                                {record.status ==='New' ?\r\n                                    null:\r\n                                    <div><span><FaPhoneAlt /></span><span>{record.phone}</span>\r\n                                    <span><FaRegEnvelope /></span><span>{record.email}</span></div>}</TableCell>\r\n                                \r\n                            </TableRow>\r\n                            <TableRow key={record.desciption}>\r\n                                <TableCell colSpan={5}>{record.desciption}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {record.status ==='Accepted' ?\r\n                                    null:\r\n                                        <div>\r\n                                        <button onClick={() => onAcceptLead(record.id,record,refreshPage)} className=\"accept-button\">Accept</button>\r\n                                        <button onClick={() => onDeclineLead(record.id)} className=\"decline-button\">Decline</button>\r\n                                    </div>}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                        {<div>{record.price}Lead Invitation </div>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer> \r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n\r\n    </div>\r\n);\r\n\r\nexport default LeadItem;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/lead';\r\nimport { Grid, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from \"@material-ui/core\";\r\nimport LeadItem from './LeadItem';\r\n\r\nconst Leads = (props,acceptLead,declineLead) =>{\r\n    useEffect(() => {\r\n    props.fetchAllLeads()\r\n    },[])\r\n\r\n    const onAcceptLead = (id,record) => {\r\n        props.acceptLead(id,record)\r\n    }\r\n    const onDeclineLead = (id,record) => {\r\n        props.declineLead(id,record)\r\n    }\r\n\r\n    return(\r\n        <Paper>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                <TableContainer>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Invited</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.dCandidateList.filter(record => record.status =='New').map((record, index) => {\r\n                                        return (<TableRow key={index} hover>\r\n                                                    <TableCell><LeadItem record={record} onAcceptLead={onAcceptLead} onDeclineLead={onDeclineLead} /></TableCell>\r\n                                                </TableRow>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer> \r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                <TableContainer>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Accepted</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.dCandidateList.filter(record => record.status =='Accepted').map((record, index) => {\r\n                                        return (<TableRow key={index} hover>\r\n                                                    <TableCell><LeadItem record={record} onAcceptLead={onAcceptLead} onDeclineLead={onDeclineLead} /></TableCell>\r\n                                                </TableRow>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>   \r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    ); \r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    dCandidateList : state.lead.list\r\n })\r\n\r\n const mapActionToProps = {\r\n    fetchAllLeads: actions.fetchAll,\r\n    acceptLead: actions.update,\r\n    declineLead: actions.Delete\r\n }\r\n\r\nexport default  connect(mapStateToProps,mapActionToProps)(Leads);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport store from './actions/store';\nimport { Provider } from 'react-redux';\nimport InvitedLeads from './components/Leads';\nimport { Grid, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <InvitedLeads />\n    </Provider>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}